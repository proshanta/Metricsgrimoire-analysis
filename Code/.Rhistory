#   write.csv(itsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsMlsFrame.csv",row.names=FALSE)
#   write.csv(scrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsScrFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsScrFrame.csv",row.names=FALSE)
#   write.csv(scmScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmScrMlsFrame.csv",row.names=FALSE)
#   write.csv(itsScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsScrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsMlsFrame.csv",row.names=FALSE)
closeConnection(conn)
scmscrFrame
projectList
rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2",sep='')
rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2")
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_SOURCE_CODE
conn<-mySqlConnection(dbName="MSR_ECLIPSE_SOURCE_CODE")
#finding out the project list we are interested in
#rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='its' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='its' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2",sep='')
rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2",sep='')
projectList<- fetch(rs, n = -1)
rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2")
projectList<- fetch(rs, n = -1)
projectList
#scmItsFrame<-data.frame()
scmscrFrame<-data.frame()
#scmMlsFrame<-data.frame()
#itsScrFrame<-data.frame()
#itsMlsFrame<-data.frame()
#scrMlsFrame<-data.frame()
#scmItsScrFrame<-data.frame()
#scmScrMlsFrame<-data.frame()
#itsScrMlsFrame<-data.frame()
#scmItsMlsFrame<-data.frame()
for(row in 1:nrow(projectList)){
str1<-paste("SELECT distinct upeople_id FROM msr_eclipse_source_code.`people_upeople` where people_id in(SELECT distinct author_id FROM msr_eclipse_source_code.`scmlog` where repository_id=(SELECT id FROM msr_eclipse_source_code.`repositories` where uri=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='scm')))",sep='')
#str2<-paste("SELECT distinct upeople_id FROM msr_eclipse_tickets.`people_upeople` natural join (SELECT distinct submitted_by as people_id  FROM msr_eclipse_tickets.`comments` where issue_id in(SELECT distinct issue FROM msr_eclipse_tickets.`issues` where tracker_id=(SELECT id FROM msr_eclipse_tickets.`trackers` where url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='its'))))A",sep='')
str3<-paste("SELECT distinct upeople_id FROM msr_eclipse_reviews.`people_upeople` natural join (SELECT distinct submitted_by as people_id  FROM msr_eclipse_reviews.`comments` where issue_id in(SELECT distinct submitted_by as people_id  FROM msr_eclipse_reviews.`comments` where issue_id in(SELECT distinct issue FROM msr_eclipse_reviews.`issues` where tracker_id=(SELECT id FROM msr_eclipse_reviews.`trackers` where url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='scr')))))A",sep='')
#str4<-paste("SELECT distinct upeople_id FROM msr_eclipse_mailing_lists.`people_upeople` natural join (SELECT distinct email_address as people_id FROM msr_eclipse_mailing_lists.`messages_people` where mailing_list_url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='mls'))A",sep='')
rs<-executeQuery(conn,str1)
scmAuthor<- fetch(rs, n = -1)
#rs<-executeQuery(conn,str2)
#itsAuthor<- fetch(rs, n = -1)
rs<-executeQuery(conn,str3)
scrAuthor<- fetch(rs, n = -1)
#rs<-executeQuery(conn,str4)
#mlsAuthor<- fetch(rs, n = -1)
#scmItsResult<-merge(scmAuthor,itsAuthor)
scmscrResult<-merge(scmAuthor,scrAuthor)
#scmMlsResult<-merge(scmAuthor,mlsAuthor)
#itsScrResult<-merge(itsAuthor,scrAuthor)
#itsMlsResult<-merge(itsAuthor,mlsAuthor)
#scrMlsResult<-merge(scrAuthor,mlsAuthor)
#scmItsScrResult<-merge(merge(scmAuthor,itsAuthor),scrAuthor)
#scmScrMlsResult<-merge(merge(scmAuthor,scrAuthor),mlsAuthor)
#itsScrMlsResult<-merge(merge(itsAuthor,scrAuthor),mlsAuthor)
#scmItsMlsResult<-merge(merge(scmAuthor,itsAuthor),mlsAuthor)
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsResult))
#     scmItsFrame<-rbind(scmItsFrame,projectFile)
projectFile<-data.frame(project=projectList[row,1],author=nrow(scmscrResult))
scmscrFrame<-rbind(scmscrFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmMlsResult))
#     scmMlsFrame<-rbind(scmMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsScrResult))
#     itsScrFrame<-rbind(itsScrFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsMlsResult))
#     itsMlsFrame<-rbind(itsMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scrMlsResult))
#     scrMlsFrame<-rbind(scrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsScrResult))
#     scmItsScrFrame<-rbind(scmItsScrFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmScrMlsResult))
#     scmScrMlsFrame<-rbind(scmScrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsScrMlsResult))
#     itsScrMlsFrame<-rbind(itsScrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsMlsResult))
#     scmItsMlsFrame<-rbind(scmItsMlsFrame,projectFile)
#
}
#   write.csv(scmItsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsFrame.csv",row.names=FALSE)
write.csv(scmscrFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmscrFrame.csv",row.names=FALSE)
#   write.csv(scmMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmMlsFrame.csv",row.names=FALSE)
#   write.csv(itsScrFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsScrFrame.csv",row.names=FALSE)
#   write.csv(itsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsMlsFrame.csv",row.names=FALSE)
#   write.csv(scrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsScrFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsScrFrame.csv",row.names=FALSE)
#   write.csv(scmScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmScrMlsFrame.csv",row.names=FALSE)
#   write.csv(itsScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsScrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsMlsFrame.csv",row.names=FALSE)
closeConnection(conn)
#Finding out the intersection of people among different DB pair wise (Eclipse)
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_SOURCE_CODE
conn<-mySqlConnection(dbName="MSR_ECLIPSE_SOURCE_CODE")
#finding out the project list we are interested in
#rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='its' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='its' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2")
#rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='scr' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2")
rs<-executeQuery(conn,"select project_id from(select * from (select * from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='mls' or data_source='scm')L)A natural join (select project_id from (SELECT * FROM (SELECT * FROM `project_repositories` where data_source='mls' or data_source='scm')L group by project_id,data_source having count(*)=1)A group by project_id having count(*)=2)B)C group by C.data_source,C.repository_name having count(*)=1)D group by project_id having count(*)=2")
projectList<- fetch(rs, n = -1)
#scmItsFrame<-data.frame()
#scmscrFrame<-data.frame()
scmMlsFrame<-data.frame()
#itsScrFrame<-data.frame()
#itsMlsFrame<-data.frame()
#scrMlsFrame<-data.frame()
#scmItsScrFrame<-data.frame()
#scmScrMlsFrame<-data.frame()
#itsScrMlsFrame<-data.frame()
#scmItsMlsFrame<-data.frame()
for(row in 1:nrow(projectList)){
str1<-paste("SELECT distinct upeople_id FROM msr_eclipse_source_code.`people_upeople` where people_id in(SELECT distinct author_id FROM msr_eclipse_source_code.`scmlog` where repository_id=(SELECT id FROM msr_eclipse_source_code.`repositories` where uri=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='scm')))",sep='')
#str2<-paste("SELECT distinct upeople_id FROM msr_eclipse_tickets.`people_upeople` natural join (SELECT distinct submitted_by as people_id  FROM msr_eclipse_tickets.`comments` where issue_id in(SELECT distinct issue FROM msr_eclipse_tickets.`issues` where tracker_id=(SELECT id FROM msr_eclipse_tickets.`trackers` where url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='its'))))A",sep='')
#str3<-paste("SELECT distinct upeople_id FROM msr_eclipse_reviews.`people_upeople` natural join (SELECT distinct submitted_by as people_id  FROM msr_eclipse_reviews.`comments` where issue_id in(SELECT distinct submitted_by as people_id  FROM msr_eclipse_reviews.`comments` where issue_id in(SELECT distinct issue FROM msr_eclipse_reviews.`issues` where tracker_id=(SELECT id FROM msr_eclipse_reviews.`trackers` where url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='scr')))))A",sep='')
str4<-paste("SELECT distinct upeople_id FROM msr_eclipse_mailing_lists.`people_upeople` natural join (SELECT distinct email_address as people_id FROM msr_eclipse_mailing_lists.`messages_people` where mailing_list_url=(select repository_name from msr_eclipse_source_code.project_repositories where project_id=",projectList[row,1]," and data_source='mls'))A",sep='')
rs<-executeQuery(conn,str1)
scmAuthor<- fetch(rs, n = -1)
#rs<-executeQuery(conn,str2)
#itsAuthor<- fetch(rs, n = -1)
#rs<-executeQuery(conn,str3)
#scrAuthor<- fetch(rs, n = -1)
rs<-executeQuery(conn,str4)
mlsAuthor<- fetch(rs, n = -1)
#scmItsResult<-merge(scmAuthor,itsAuthor)
#scmscrResult<-merge(scmAuthor,scrAuthor)
scmMlsResult<-merge(scmAuthor,mlsAuthor)
#itsScrResult<-merge(itsAuthor,scrAuthor)
#itsMlsResult<-merge(itsAuthor,mlsAuthor)
#scrMlsResult<-merge(scrAuthor,mlsAuthor)
#scmItsScrResult<-merge(merge(scmAuthor,itsAuthor),scrAuthor)
#scmScrMlsResult<-merge(merge(scmAuthor,scrAuthor),mlsAuthor)
#itsScrMlsResult<-merge(merge(itsAuthor,scrAuthor),mlsAuthor)
#scmItsMlsResult<-merge(merge(scmAuthor,itsAuthor),mlsAuthor)
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsResult))
#     scmItsFrame<-rbind(scmItsFrame,projectFile)
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmscrResult))
#     scmscrFrame<-rbind(scmscrFrame,projectFile)
#
projectFile<-data.frame(project=projectList[row,1],author=nrow(scmMlsResult))
scmMlsFrame<-rbind(scmMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsScrResult))
#     itsScrFrame<-rbind(itsScrFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsMlsResult))
#     itsMlsFrame<-rbind(itsMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scrMlsResult))
#     scrMlsFrame<-rbind(scrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsScrResult))
#     scmItsScrFrame<-rbind(scmItsScrFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmScrMlsResult))
#     scmScrMlsFrame<-rbind(scmScrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(itsScrMlsResult))
#     itsScrMlsFrame<-rbind(itsScrMlsFrame,projectFile)
#
#     projectFile<-data.frame(project=projectList[row,1],author=nrow(scmItsMlsResult))
#     scmItsMlsFrame<-rbind(scmItsMlsFrame,projectFile)
#
}
#   write.csv(scmItsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsFrame.csv",row.names=FALSE)
#   write.csv(scmscrFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmscrFrame.csv",row.names=FALSE)
write.csv(scmMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmMlsFrame.csv",row.names=FALSE)
#   write.csv(itsScrFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsScrFrame.csv",row.names=FALSE)
#   write.csv(itsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsMlsFrame.csv",row.names=FALSE)
#   write.csv(scrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsScrFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsScrFrame.csv",row.names=FALSE)
#   write.csv(scmScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmScrMlsFrame.csv",row.names=FALSE)
#   write.csv(itsScrMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/itsScrMlsFrame.csv",row.names=FALSE)
#   write.csv(scmItsMlsFrame, file = "../Output/PreAnalysis/PairDBEclipse/scmItsMlsFrame.csv",row.names=FALSE)
closeConnection(conn)
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
ownerlist
ownerList
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
ownerList
if(nrow(ownerList)=0)
print("hi")
if(nrow(ownerList)==0)
print("hi")
if(nrow(ownerList)==1)
print("hi")
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- mydata[row,1]
initialDate<- mydata[row,2]
endDate<- mydata[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorList<- fetch(rs, n = -1)
}
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- mydata[row,1]
initialDate<- mydata[row,2]
endDate<- mydata[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorList<- fetch(rs, n = -1)
}
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorList<- fetch(rs, n = -1)
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorList<- fetch(rs, n = -1)
}
authorList
names(authorList)
a<-data.frame(t=1:5,z=2:10)
a<-data.frame(t=1:5,z=10:15)
a<-data.frame(t=1:5,z=10:14)
b<-data.frame(k=2:4)
merge(a,b,by.x='t',by.y='k')[, c(2,3)]
merge(a,b,by.x='t',by.y='k')[, c(1,2)]
merge(a,b,by.x='t',by.y='k')[, c(1,3)]
merge(a,b,by.x='t',by.y='k')[, c(1,3)]
merge(a,b,by.x='t',by.y='k')[, c(1,2)]
x<-merge(a,b,by.x='t',by.y='k')
x
c<-x[1]
c
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueList!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- authorIssueList[2]
}
authorList
authorIssueList
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueList!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
ownerList
merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueList!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
l<-data.frame(a=c(1,2,2,3))
l
unique(l)
nrow(authorList)
authorList<- unique(authorIssueList[2])
nrow(authorList)
authorList
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
repoList
x
bob[] <- lapply(x[1], as.character)
bob <- lapply(x[1], as.character)
bob
paste(bob,collapse=",")
dd<-paste(bob,collapse=",")
dd
dd<-paste(x[1],collapse=",")
dd
x
bb<-x[1]
bb
dd<-paste(bb,collapse=" ")
dd
dd<-paste(bb[,1],collapse=" ")
dd
dd<-paste(bb[,1],collapse=",")
dd
names(authorList)
colname(authorList)<-c("author_id")
colnames(authorList)<-c("author_id")
names(author_id)
names(authorList)
colnames(authorList)<-c("author_id")
authorList
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
issues
authors
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
str1<-paste("select author1 as author_id1,author2 as author_id2,count(*) from (SELECT submitted_by as author1,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))A natural join (SELECT submitted_by as author2,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))B where author1 <> author2 group by author1,author2",sep='')
issues  authors initialDate endDate
str1
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
str1<-paste("select author1 as author_id1,author2 as author_id2,count(*) from (SELECT submitted_by as author1,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))A natural join (SELECT submitted_by as author2,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))B where author1 <> author2 group by author1,author2",sep='')
}
str1
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
str1<-paste("select author1 as author_id1,author2 as author_id2,count(*) from (SELECT submitted_by as author1,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))A natural join (SELECT submitted_by as author2,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))B where author1 <> author2 group by author1,author2",sep='')
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
str1<-paste("select author1 as author_id1,author2 as author_id2,count(*) from (SELECT submitted_by as author1,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))A natural join (SELECT submitted_by as author2,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))B where author1 <> author2 group by author1,author2",sep='')
rs<-executeQuery(conn,str1)
edgeList<- fetch(rs, n = -1)
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
fileConn<-file(paste("../Output/TCN/",repoName,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
closeConnection(conn)
