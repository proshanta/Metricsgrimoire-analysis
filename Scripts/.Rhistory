install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
install.packages("twitteR")
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(twitteR)
library(stringr)
library(stringi)
library(twitteR)
library(stringi)
package.install(stringi)
install.package(stringi)
install.packages(stringi)
install.packages("stringi")
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(RCurl)
install.packages("RCurl")
library(RCurl)
install.packages("bitops")
library(RCurl)
install.packages("RJSONIO")
library(RJSONIO)
install.packages("stringr")
library(stringr)
ls()
search()
api_key <- "Zr8XKvjgMSfYMZNsUfBIa2KJL"
api_secret <- "SZQdKg7zlBdNtMeYtfxqpaA9RNqVroZNMZ7iIukb5ksVL6fzl9"
token <- "111579646-j2h3YqXh1BTI9g73WiLvJFt6UaPAg0fCRwIDlSUw"
token_secret <- "Z6TZkQp8DFp0xEcT5HqgvdgZDM6QdPH4xLL2xHGaKK6eh"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
setup_twitter_oauth(api_key, api_secret, token, token_secret)
ls()
api_key
api_secret
token
token_secret
setup_twitter_oauth(api_key, api_secret, token, token_secret)
api_key <- "Zr8XKvjgMSfYMZNsUfBIa2KJL"
api_secret <- "SZQdKg7zlBdNtMeYtfxqpaA9RNqVroZNMZ7iIukb5ksVL6fzl9"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", since="2014-08-20")
tweets <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", since="2014-08-20")
install.packages("base64enc"
)
library(base64enc)
tweets <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", since="2014-08-20")
tweets
tweets.df <- twListToDF(tweets)
tweers.df
tweets.df
names(tweets.df)
a<-available.packages()
head(rownames(a),3)
a
rownum(a)
count(a)
names(a)
rownames(a)
head(rownames(a),3)
head(rownames(a),2)
a.length()
length(a)
rownum(a)
rowcount(a)
rowcnt(a)
count(a)
tabulate(a)
y<-c(12,23,34)
length(y)
z<data.frame(y,z=c("qq","ww"))
z<data.frame(y,z:=c("qq","ww"))
z<data.frame(y,z<-c("qq","ww"))
z<-data.frame(y,w=c("qq","ww"))
z<-data.list(y,w=c("qq","ww"))
z<-list(y,w=c("qq","ww"))
z
length(z
)
length(x)
ls()
length(a)
e<-a:z
e
x<-k:z
x<-"k":"z"
x
1/0;
0/0;
ls()
dim(a)
a
ls()
dim(y)
dim(z)
dim(a)
attributes(a)
class(a)
x
y
z
nrow(a)
colnames(a)
rownames(a)
names(a)
sapply(a,class)
a<-sapply(a,class)
a
tweets <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", since="2014-08-20")
df.tweets
tweets.df <- twListToDF(tweets)
tweets.df
class(df.tweets)
class(tweets.df)
x<-data.frame(a=1:3,b=c("a",NA,"B"))
x
y<-complete.cases(x)
y
x[y,]
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
gl(3, 10)
q()
setwd("C:\\Users\\IBM_ADMIN\\Desktop\\MatricsGrimoire\\PreAnalysisQuery\\Grimoire\\Metricsgrimoire-analysis\\Scripts")
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_SOURCE_CODE
conn<-mySqlConnection(dbName="MSR_ECLIPSE_SOURCE_CODE")
rs<-executeQuery(conn,"select repository_id, count(distinct author_id) number_of_unique_author from scmlog group by repository_id order by number_of_unique_author DESC")
MSR_ECLIPSE_SOURCE_CODE<- fetch(rs, n = -1)
write.table(x=MSR_ECLIPSE_SOURCE_CODE,"..\\Output\\MSR_ECLIPSE_SOURCE_CODE.csv",sep = ",",row.names = FALSE)
pdf("..\\Output\\MSR_ECLIPSE_SOURCE_CODE_HIST.pdf")
hist(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
dev.off()
#Mean
mean(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
skewness(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
kurtosis(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
stat.desc(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
summary(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
library(psych)
describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
install.packages("psych")
library(psych)
describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
setwd("C:\\Users\\IBM_ADMIN\\Desktop\\MatricsGrimoire\\PreAnalysisQuery\\Grimoire\\Metricsgrimoire-analysis\\Scripts")
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_SOURCE_CODE
conn<-mySqlConnection(dbName="MSR_ECLIPSE_SOURCE_CODE")
rs<-executeQuery(conn,"select repository_id, count(distinct author_id) number_of_unique_author from scmlog group by repository_id order by number_of_unique_author DESC")
MSR_ECLIPSE_SOURCE_CODE<- fetch(rs, n = -1)
write.table(x=MSR_ECLIPSE_SOURCE_CODE,"..\\Output\\MSR_ECLIPSE_SOURCE_CODE.csv",sep = ",",row.names = FALSE)
pdf("..\\Output\\MSR_ECLIPSE_SOURCE_CODE_HIST.pdf")
hist(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
dev.off()
#Summary Descriptive Statistics for eclipse
print("Summary Descriptive Statistics for eclipse")
library(psych)
describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
closeConnection(conn)
#Creating MySql connection for MSR_OPENSTACK_SOURCE_CODE
conn<-mySqlConnection(dbName="MSR_OPENSTACK_SOURCE_CODE")
rs<-executeQuery(conn,"select repository_id, count(distinct author_id) number_of_unique_author from scmlog group by repository_id order by number_of_unique_author DESC")
MSR_OPENSTACK_SOURCE_CODE<- fetch(rs, n = -1)
write.table(x=MSR_OPENSTACK_SOURCE_CODE,"..\\Output\\MSR_OPENSTACK_SOURCE_CODE.csv",sep = ",",row.names = FALSE)
pdf("..\\Output\\MSR_OPENSTACK_SOURCE_CODE_HIST.pdf")
hist(MSR_OPENSTACK_SOURCE_CODE$number_of_unique_author)
dev.off()
#Summary Descriptive Statistics for Openstack
print("Summary Descriptive Statistics for openstack")
describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
closeConnection(conn)
d<-describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
write.table(x=d,"..\\Output\\degree.csv",sep = ",")
e<-describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
write.table(x=e,"..\\Output\\Stat_openstack.csv",sep = ",")
d<-describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
write.table(x=d,"..\\Output\\Stat_openstack.csv",sep = ",")
e<-describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
write.table(x=e,"..\\Output\\Stat_eclipse.csv",sep = ",")
d<-describe(MSR_ECLIPSE_SOURCE_CODE$number_of_unique_author)
write.table(x=d,"..\\Output\\Stat_openstack.csv",sep = ",")
