authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
#-----------------------finding the edge list-----------------------------
str2<-paste("select id from msr_eclipse_source_code.repositories where uri in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
for(scmRow in 1:nrow(scmRepoList)){
scmRepoName<-scmRepoList[scmRow,1]
str4<-paste("select author_id1,author_id2,count(*) as cnt from (select issue_id,submitted_by as author_id1 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)C natural join (select issue_id,submitted_by as author_id2 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)D where author_id1<>author_id2 group by author_id1,author_id2",sep='')
rs<-executeQuery(conn,str4)
edgeList<- fetch(rs, n = -1)
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id1')[, c(2,3,4)]
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id2')[, c(2,3,4)]
colnames(edgeList)<-c("author_id1","author_id2","count")
#----------------Edgelist to pajek upeople basis------------------------
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
colnames(output2)<-c("author_id1","author_id2","count")
fileConn<-file(paste("../Output/RCN/",repoName,"_",scmRepoName,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
}
closeConnection(conn)
repoName
initialDate
endDate
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
finalAuthorList
str2<-paste("select id from msr_eclipse_source_code.repositories where uri in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
peopleupeople
scmPeopleListstr
str3
upeopleList
upeople
upeople<-paste(unique(upeopleList[,2]),collapse=",")
upeople
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeople<-paste(unique(upeopleList[,2]),collapse=",")
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
str2
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeople<-paste(unique(upeopleList[,2]),collapse=",")
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
#-----------------------finding the edge list-----------------------------
str2<-paste("select id from msr_eclipse_source_code.repositories where uri in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
scmRepoList
str2<-paste("select id from msr_eclipse_source_code.repositories where uri in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
str2
str2<-paste("select id from msr_eclipse_reviews.trackers where uri in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str2
str2<-paste("select id from msr_eclipse_reviews.trackers where url in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
for(scmRow in 1:nrow(scmRepoList)){
scmRepoName<-scmRepoList[scmRow,1]
str4<-paste("select author_id1,author_id2,count(*) as cnt from (select issue_id,submitted_by as author_id1 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)C natural join (select issue_id,submitted_by as author_id2 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)D where author_id1<>author_id2 group by author_id1,author_id2",sep='')
rs<-executeQuery(conn,str4)
edgeList<- fetch(rs, n = -1)
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id1')[, c(2,3,4)]
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id2')[, c(2,3,4)]
colnames(edgeList)<-c("author_id1","author_id2","count")
#----------------Edgelist to pajek upeople basis------------------------
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
colnames(output2)<-c("author_id1","author_id2","count")
fileConn<-file(paste("../Output/RCN/",repoName,"_",scmRepoName,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
scmRepoName
str4
edgeList
str4
scmPeopleListstr
scmPeopleList
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
peopleupeople
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
scmPeopleListstr
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
repoName
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
authors
finalAuthorList
upeople
scmPeopleListstr
str2<-paste("select id from msr_eclipse_reviews.trackers where url in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
peopleupeople
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
scmPeopleListstr
setwd("C:/Users/IBM_ADMIN/Desktop/Subhajit Sir/Grimoire/Metricsgrimoire-analysis/Code")
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCN/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCN/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCN/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeople<-paste(unique(upeopleList[,2]),collapse=",")
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
#-----------------------finding the edge list-----------------------------
str2<-paste("select id from msr_eclipse_reviews.trackers where url in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
for(scmRow in 1:nrow(scmRepoList)){
scmRepoName<-scmRepoList[scmRow,1]
str4<-paste("select author_id1,author_id2,count(*) as cnt from (select issue_id,submitted_by as author_id1 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)C natural join (select issue_id,submitted_by as author_id2 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)D where author_id1<>author_id2 group by author_id1,author_id2",sep='')
rs<-executeQuery(conn,str4)
edgeList<- fetch(rs, n = -1)
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id1')[, c(2,3,4)]
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id2')[, c(2,3,4)]
colnames(edgeList)<-c("author_id1","author_id2","count")
#----------------Edgelist to pajek upeople basis------------------------
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
colnames(output2)<-c("author_id1","author_id2","count")
fileConn<-file(paste("../Output/RCN/",repoName,"_",scmRepoName,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
}
closeConnection(conn)
repoList
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
repoName
initialDate
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeopleList
upeople<-paste(unique(upeopleList[,2]),collapse=",")
upeople
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
str2<-paste("select id from msr_eclipse_reviews.trackers where url in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
scmRepoList
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
peopleupeople
scmPeopleList<-peopleUpeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
scmPeopleListstr
scmPeopleList<-peopleupeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
scmPeopleListstr
setwd("C:/Users/IBM_ADMIN/Desktop/Subhajit Sir/Grimoire/Metricsgrimoire-analysis/Code")
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCN/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCN/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCN/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeople<-paste(unique(upeopleList[,2]),collapse=",")
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
#-----------------------finding the edge list-----------------------------
str2<-paste("select id from msr_eclipse_reviews.trackers where url in (select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='scr')",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_reviews.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleupeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse=",")
for(scmRow in 1:nrow(scmRepoList)){
scmRepoName<-scmRepoList[scmRow,1]
str4<-paste("select author_id1,author_id2,count(*) as cnt from (select issue_id,submitted_by as author_id1 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)C natural join (select issue_id,submitted_by as author_id2 from msr_eclipse_reviews.comments A natural join (SELECT id as issue_id FROM msr_eclipse_reviews.`issues` where tracker_id=",scmRepoName," and submitted_by in(",scmPeopleListstr,"))B)D where author_id1<>author_id2 group by author_id1,author_id2",sep='')
rs<-executeQuery(conn,str4)
edgeList<- fetch(rs, n = -1)
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id1')[, c(2,3,4)]
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id2')[, c(2,3,4)]
colnames(edgeList)<-c("author_id1","author_id2","count")
#----------------Edgelist to pajek upeople basis------------------------
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
colnames(output2)<-c("author_id1","author_id2","count")
fileConn<-file(paste("../Output/RCN/",repoName,"_",scmRepoName,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
}
closeConnection(conn)
str1<-paste("select author1 as author_id1,author2 as author_id2,count(*) from (SELECT submitted_by as author1,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))A natural join (SELECT submitted_by as author2,issue_id FROM `comments` where issue_id in(",issues,") and submitted_by in (",authors,") and (DATE_FORMAT(submitted_on,'%Y-%m-%d') between '",initialDate,"' and '",endDate,"'))B where author1 <> author2 group by author1,author2",sep='')
str1
scrPeopleListstr
scrPeopleListstr
scrPeopleList
scmRepoName
setwd("C:/Users/IBM_ADMIN/Desktop/Subhajit Sir/Grimoire/Metricsgrimoire-analysis/Code")
#read csv file where all repo list are
repoList = read.csv("../Analysis/TCN/TCNrepoList.csv")  # read csv file
#read csv file where all owner list are
ownerList = read.csv("../Analysis/TCN/TCNownerList.csv")  # read csv file
#read csv file where all issue list are
issueList = read.csv("../Analysis/TCN/TCNissueList.csv")  # read csv file
if(nrow(ownerList)==0){
ownerflag=0
}
if(nrow(issueList)==0){
issueflag=0
}
#iterate each row/repo details in the file
for(row in 1:nrow(repoList)){
#repo name, and date range
repoName <- repoList[row,1]
initialDate<- repoList[row,2]
endDate<- repoList[row,3]
#importing all supporting custom methods
source("Methods.R")
#Creating MySql connection for MSR_ECLIPSE_TICKETS
conn<-mySqlConnection(dbName="MSR_ECLIPSE_TICKETS")
#Finding out the author list/vertices for the network
str1<-paste("SELECT id,assigned_to FROM `issues` where tracker_id=",repoName,sep='')
rs<-executeQuery(conn,str1)
authorIssueList<- fetch(rs, n = -1)
if(ownerflag!=0){
authorIssueList<-merge(authorIssueList,ownerList,by.x='assigned_to',by.y='owner_id')[, c(1,2)]
}
if(issueflag!=0){
authorIssueList<-merge(authorIssueList,issueList,by.x='id',by.y='issue_id')[, c(1,2)]
}
authorList<- unique(authorIssueList[2])
colnames(authorList)<-c("author_id")
issues<-paste(unique(authorIssueList[,1]),collapse=",")
authors<-paste(unique(authorIssueList[,2]),collapse=",")
#generating the pajek network file from vertices and edges
finalAuthorList<-data.frame(id=1:nrow(authorList),authorList)
finalAuthorStr<-paste(unique(finalAuthorList[,2]),collapse=",")
str2<-paste("SELECT people_id ,upeople_id as author_id  FROM `people_upeople` where people_id in (",finalAuthorStr,")",sep='')
rs<-executeQuery(conn,str2)
upeopleList<- fetch(rs, n = -1)
upeople<-paste(unique(upeopleList[,2]),collapse=",")
finalAuthorList<-data.frame(id=1:nrow(upeopleList),upeopleList)
#-----------------------finding the edge list-----------------------------
str2<-paste("select distinct repository_name from msr_eclipse_source_code.`project_repositories` where project_id in(SELECT distinct project_id FROM msr_eclipse_source_code.`project_repositories` where repository_name=(SELECT url FROM msr_eclipse_tickets.`trackers` where id=",repoName,")) and data_source='mls'",sep='')
rs<-executeQuery(conn,str2)
scmRepoList<- fetch(rs, n = -1)
str3<-paste("SELECT people_id,upeople_id FROM msr_eclipse_mailing_lists.`people_upeople` where upeople_id in(",upeople,")",sep='')
rs<-executeQuery(conn,str3)
peopleupeople<- fetch(rs, n = -1)
scmPeopleList<-peopleupeople[1]
scmPeopleListstr<-paste(unique(scmPeopleList[,1]),collapse="','")
for(scmRow in 1:nrow(scmRepoList)){
scmRepoName<-scmRepoList[scmRow,1]
str4<-paste("select p1 as author_id1,p2 as author_id2,count(*) as cnt from (SELECT email_address as p1,type_of_recipient as t1,message_id FROM msr_eclipse_mailing_lists.`messages_people` where mailing_list_url='",scmRepoName,"' and email_address in('",scmPeopleListstr,"'))A natural join (SELECT email_address as p2,type_of_recipient as t2,message_id FROM msr_eclipse_mailing_lists.`messages_people` where mailing_list_url='",scmRepoName,"' and email_address in('",scmPeopleListstr,"'))B where (A.t1='To' and B.t2='From') or (A.t1='From' and B.t2='To') group by p1,p2",sep='')
rs<-executeQuery(conn,str4)
edgeList<- fetch(rs, n = -1)
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id1')[, c(2,3,4)]
edgeList<-merge(peopleupeople,edgeList,by.x='people_id',by.y='author_id2')[, c(2,3,4)]
colnames(edgeList)<-c("author_id1","author_id2","count")
#----------------Edgelist to pajek upeople basis------------------------
output1<-merge(finalAuthorList,edgeList,by.x='author_id',by.y='author_id1')[, c(2,3,4)]
output2<-merge(finalAuthorList,output1,by.x='author_id',by.y='author_id2')[, c(2,3,4)]
colnames(output2)<-c("author_id1","author_id2","count")
fileConn<-file(paste("../Output/MCN/",repoName,"_",scmRow,".net",sep=''))
vertices<-c(paste("*Vertices ",nrow(finalAuthorList)))
for(lines in 1:nrow(finalAuthorList)){
str3<-paste(finalAuthorList[lines,1],' "',finalAuthorList[lines,2],'" ','box',sep='')
vertices<-c(vertices,str3)
}
vertices<-c(vertices,"*Edges")
for(lines in 1:nrow(edgeList)){
str3<-paste(edgeList[lines,1],' ',edgeList[lines,2],' ',edgeList[lines,3],sep='')
vertices<-c(vertices,str3)
}
write(vertices, fileConn)
close(fileConn)
}
}
closeConnection(conn)
